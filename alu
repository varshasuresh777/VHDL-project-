library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
entity final_logic is
port
(
A,B : in std_logic_vector(7 downto 0);
clock,load,reset : in std_logic;
Z : out std_logic_vector (15 downto 0);
endflag : out std_logic);
end final_logic;
architecture finallogic_struct of final_logic is
signal clear : std_logic := '0';
signal s1,s2 : std_logic_vector(7 downto 0);
signal z1,z2 : std_logic_vector(15 downto 0);
component Register8_logic is
port
(
qin: in std_logic_vector(7 downto 0);
clk,reset : in std_logic;
qout: out std_logic_vector (7 downto 0));
end component;
component Register16_logic is
port
(
din: in std_logic_vector(15 downto 0);
clk,reset : in std_logic;
dout: out std_logic_vector (15 downto 0));
end component;
component logicunit is
port
(
a,b : in std_logic_vector(7 downto 0);
c : out std_logic_vector (15 downto 0));
end component;
begin
b1: Register8_logic port map (A(7 downto 0), clock, reset,s1(7 downto 0));
b2: Register8_logic port map (B(7 downto 0), clock, reset, s2(7 downto 0));
b3: logicunit port map (s1(7 downto 0), s2(7 downto 0), z1 (15 downto 0));
b4: Register16_logic port map (z1 (15 downto 0), clock, reset, z2(15 downto 0));
process(clock,load,reset)
begin
if (reset = '1') then
 if falling_edge(load) then
 clear <= '1';
end if;
else
clear <='0';
end if;
end process;
process (z1,z2)
begin
if (z1=z2) then
endflag <='1';
Z <= z2;
else
 endflag <= '0';
end if ;
end process;
end finallogic_struct;
